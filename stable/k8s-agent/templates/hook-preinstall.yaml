{{- if eq .Values.agent.image.privateRegistry true}}
apiVersion: v1
kind: Secret
metadata:
  name: nutanix-k8s-agent-pull-secret
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ .Values.agent.image.imageCredentials.dockerconfig }}
{{- end }}
---
{{- if eq .Values.createSecret true}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.agent.name }}
  namespace: {{ (include "k8s-agent.namespace" .) | quote }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
type: kubernetes.io/basic-auth
data:
  username: {{ required "PC username is required" .Values.pc.username | b64enc}}
  password: {{ required "PC user password is required" .Values.pc.password | b64enc}}
{{- end  }} 
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.agent.name }}
  namespace: {{ (include "k8s-agent.namespace" .) | quote }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Values.agent.name }}
  namespace: {{ (include "k8s-agent.namespace" .) | quote }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
rules:
{{- if eq .Values.k8sDistribution "OCP"}}
- apiGroups:
  - 'config.openshift.io'
  resources:
  - 'infrastructures'
  verbs:
  - 'get'
{{- end }}
- apiGroups:
  - "apps"
  resources:
  - "deployments"
  verbs:
  - "get"
  - "list"
- apiGroups:
  - '*'
  resources:
  - 'namespaces'
  verbs:
  - 'get'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.agent.name }}
  namespace: {{ (include "k8s-agent.namespace" .) | quote }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Values.agent.name }}
subjects:
- kind: ServiceAccount
  name: {{ .Values.agent.name }}
  namespace: {{ (include "k8s-agent.namespace" .) | quote }} 
---
apiVersion: v1
kind: Pod
metadata:
  name: hook-preinstall
  namespace: {{ (include "k8s-agent.namespace" .) | quote }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  {{- if eq .Values.agent.image.privateRegistry true}}
  imagePullSecrets:
  - name: nutanix-k8s-agent-pull-secret
  {{- end }}
  securityContext:
    runAsUser: 9999
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  serviceAccountName:  {{ .Values.agent.name }}
  containers:
  - name: hook-preinstall-container
    image: "{{ .Values.agent.image.repository }}/{{ .Values.agent.image.name }}:{{ .Values.agent.image.tag | default .Chart.AppVersion }}"
    imagePullPolicy: {{ .Values.agent.image.pullPolicy }}
    command: ["/k8s-agent/k8s-agent"]
    volumeMounts:
      - name: pc-creds-volume
        mountPath: /certs
        readOnly: true
    args:
      [
        "--chart-hook=pre-install",
        "--pc-endpoint={{ required "Endpoint is required" .Values.pc.endpoint }}",
        "--pc-port={{ .Values.pc.port }}",
        "--insecure={{ .Values.pc.insecure }}",
        "--k8s-cluster-name={{ required "Name of kubernetes cluster is required" .Values.k8sClusterName }}",
        "--k8s-distribution={{ required "Kubernetes distribution is required" .Values.k8sDistribution }}",
        "--k8s-cluster-category={{ .Values.categoryMappings }}",
        "--update-config-in-min={{ .Values.agent.updateConfigInMin }}",
        "--update-metrics-in-min={{ .Values.agent.updateMetricsInMin }}",
      ]
    securityContext:
      runAsUser: 9999
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
          - ALL
  volumes:
  - name: pc-creds-volume
    secret:
      secretName: {{ .Values.agent.name }}     
  restartPolicy: Never
  terminationGracePeriodSeconds: 0