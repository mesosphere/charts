---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: remotes.dataservices.nutanix.com
spec:
  group: dataservices.nutanix.com
  names:
    kind: Remote
    listKind: RemoteList
    plural: remotes
    shortNames:
    - remote
    - remotes
    singular: remote
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - description: Address of the remote
      jsonPath: .spec.ndkServiceIp
      name: Address
      type: string
    - description: Port of the remote
      jsonPath: .spec.ndkServicePort
      name: Port
      type: integer
    - description: Availability of the remote
      jsonPath: .status.conditions[0].status
      name: Available
      type: string
    - description: Reason
      jsonPath: .status.conditions[0].reason
      name: Reason
      priority: 1
      type: string
    - description: Name of the remote Kubernetes cluster. It is the DNS name used
        as SAN in the TLS certificate
      jsonPath: .spec.clusterName
      name: Cluster-Name
      priority: 1
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Remote is the Schema for the remotes API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: RemoteSpec defines the desired state of Remote.
            properties:
              clusterName:
                type: string
              ndkServiceIp:
                type: string
              ndkServicePort:
                description: |-
                  ndkServicePort is the TCP port at which the NDK
                  service running on the remote Kubernetes cluster
                  is listening. If unspecified, the default value
                  is used.
                type: integer
              tlsConfig:
                description: |-
                  tlsConfig specifies the tls configuration for connecting to the
                  remote NDK sever.
                properties:
                  caBundle:
                    description: |-
                      caBundle is the PEM CAs bundle which can be used to validate the
                      certificate chain when connecting to the remote NDK server.
                      Ignored if skipTLSVerify is set to true.
                    format: byte
                    type: string
                  enableMTLS:
                    description: |-
                      Enables mutual TLS while connecting the remote NDK sever.
                      By default, this will use the current clusters NDK server certificates
                      while connecting to the remote NDK server.
                    type: boolean
                  mTLSClientConfig:
                    description: |-
                      mTLSClientConfig specifies the mutual TLS configuration for connecting
                      to the remote NDK sever.
                    properties:
                      secretName:
                        description: |-
                          secretName is the name of the pre-existing secret resource in the same
                          namespace. The credentials in the secret are used to connect to the
                          remote NDK server.
                          Secret must be of type kubernetes.io/tls and has to contain all three -
                          tls certificate, tls key, and ca certificate formatted as -
                          tls.crt, tls.key and ca.crt.
                        type: string
                      secretNamespace:
                        description: |-
                          secretNamespace is the pre-existing namespace that the specified
                          secret resource resides in.
                        type: string
                    type: object
                  skipTLSVerify:
                    description: |-
                      INSECURE: skipTLSVerify skips the TLS server certificate
                      verification when connecting to the remote NDK server.
                      If set to true, caBundle and configuremTLS configurations are ignored.
                    type: boolean
                type: object
            type: object
            x-kubernetes-validations:
            - message: Spec is required and immutable for remotes.dataservices.nutanix.com
              rule: self == oldSelf
          status:
            description: RemoteStatus defines the observed state of Remote
            properties:
              clusterID:
                description: |-
                  ID of the remote cluster discovered after establishing connectivity
                  to it.
                type: string
              conditions:
                description: conditions represent the latest available observations
                  of the Remote.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
