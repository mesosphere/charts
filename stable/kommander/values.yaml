federate:
  kubeaddonsInitializer:
    repository: "mesosphere/kubeaddons-addon-initializer"
    tag: "v0.2.8"
    pullPolicy: IfNotPresent

global:
  federate:
    airgapped:
      enabled: false
      chartRepo: http://konvoy-addons-chart-repo.kubeaddons.svc:8879

kommander-federation:
  enabled: true

kommander-licensing:
  enabled: true

kommander-thanos:
  enabled: true
  thanosAddress: "prometheus-kubeaddons-prom-prometheus.kubeaddons.svc.cluster.local:10901"
  kommanderServiceAccount: kommander-kubeaddons

kommander-karma:
  enabled: true
  alertmanagerAddress: "prometheus-kubeaddons-prom-alertmanager.kubeaddons.svc.cluster.local:9093"
  kommanderServiceAccount: kommander-kubeaddons
  kommanderKarmaConfigMap: kommander-kubeaddons-config

kubeaddons-catalog:
  enabled: true

grafana:
  enabled: true

  service:
    type: ClusterIP
    port: 80

  homeDashboard:
    name: "Kubernetes / Compute Resources / Cluster [Global]"
    cronJob:
      name: set-grafana-home-dashboard
      image: dwdraju/alpine-curl-jq

  hooks:
    image: dwdraju/alpine-curl-jq
    secretKeyRef: ops-portal-username
    # Do not use, this will be deprecated
    serviceURL: http://kommander-kubeaddons-grafana.kommander
    # Do not use, this will be deprecated
    kommanderServiceAccount: kommander-kubeaddons

  ## Do not deploy default dashboards.
  ##
  defaultDashboardsEnabled: false

  ## Grafana's primary configuration
  ## NOTE: values in map will be converted to ini format
  ## ref: http://docs.grafana.org/installation/configuration/
  ##
  grafana.ini:
    server:
      protocol: http
      enable_gzip: true
      root_url: "%(protocol)s://%(domain)s:%(http_port)s/ops/portal/kommander/monitoring/grafana"
    auth.proxy:
      enabled: true
      header_name: X-Forwarded-User
      auto-sign-up: true
    auth.basic:
      enabled: false
    users:
      auto_assign_org_role: Admin

  ingress:
    ## If true, Grafana Ingress will be created
    ##
    enabled: true

    ## Annotations for Grafana Ingress
    ##
    annotations:
      kubernetes.io/ingress.class: "traefik"
      traefik.frontend.rule.type: "PathPrefixStrip"
      traefik.ingress.kubernetes.io/auth-response-headers: "X-Forwarded-User"
      traefik.ingress.kubernetes.io/auth-type: "forward"
      traefik.ingress.kubernetes.io/auth-url: "http://traefik-forward-auth-kubeaddons.kubeaddons.svc.cluster.local:4181/"
      traefik.ingress.kubernetes.io/priority: "4"

    ## Labels to be added to the Ingress
    ##
    labels: {}

    ## Hostnames.
    ## Must be provided if Ingress is enable.
    ##
    # hosts:
    #   - grafana.domain.com
    hosts:
      - ""

    ## Path for grafana ingress
    path: /ops/portal/kommander/monitoring/grafana

    ## TLS configuration for grafana Ingress
    ## Secret must be manually created in the namespace
    ##
    tls: []
    # - secretName: grafana-general-tls
    #   hosts:
    #   - grafana.example.com

  ## Configure grafana datasources
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  ##
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: ThanosQuery
          type: prometheus
          url: http://kommander-kubeaddons-thanos-query-http.kommander:10902/
          access: proxy
          isDefault: true
        - name: KommanderPrometheus
          type: prometheus
          url: http://prometheus-kubeaddons-prom-prometheus.kubeaddons:9090/
          access: proxy
          isDefault: false

  ## Sidecars that collect the configmaps with specified label and stores the included files them into the respective folders
  ## Requires at least Grafana 5 to work and can't be used together with parameters dashboardProviders, datasources and dashboards
  sidecar:
    dashboards:
      enabled: true
      # label that the configmaps with dashboards are marked with
      label: grafana_dashboard_kommander
    datasources:
      enabled: true
      defaultDatasourceEnabled: false
      # label that the configmaps with datasources are marked with
      label: grafana_datasource_kommander
      # If specified, the sidecar will search for datasource config-maps inside this namespace.
      # Otherwise the namespace in which the sidecar is running will be used.
      # It's also possible to specify ALL to search in all namespaces
      searchNamespace: null

  # to avoid needing to download any plugins at runtime, use a container and a shared volume
  # do not enable the plugins here, instead rebuild the mesosphere/grafana-plugins image with the new plugins
  plugins: []
  #  - grafana-piechart-panel
  extraEmptyDirMounts:
    - name: plugins
      mountPath: /var/lib/grafana/plugins/
  extraInitContainers:
    - name: grafana-plugins-install
      image: mesosphere/grafana-plugins:v0.0.1
      command:
        [
          "/bin/sh",
          "-c",
          "cp -a /var/lib/grafana/plugins/. /var/lib/grafana/shared-plugins/",
        ]
      volumeMounts:
        - name: plugins
          mountPath: /var/lib/grafana/shared-plugins/

kommander-ui:
  showCost: true
  impersonateUser: true
  ingress:
    enabled: true
    traefikFrontendRuleType: PathPrefixStrip
    extraAnnotations:
      traefik.ingress.kubernetes.io/priority: "4"
      traefik.ingress.kubernetes.io/auth-type: forward
      traefik.ingress.kubernetes.io/auth-url: http://traefik-forward-auth-kubeaddons.kubeaddons.svc.cluster.local:4181/
      traefik.ingress.kubernetes.io/auth-response-headers: X-Forwarded-User,Impersonate-User,Impersonate-Group
    path: /ops/portal/kommander/ui
    graphqlPath: /ops/portal/kommander/ui/graphql

portalRBAC:
  grafana:
    enabled: true
  kommanderUserInterface:
    enabled: true

kubecost:
  thanosAddress: "kubecost-kubeaddons-prometheus-server.kubecost.svc.cluster.local:10901"
  # Do not use, this will be deprecated
  kommanderServiceAccount: kommander-kubeaddons
  federate:
    addons: true
    systemNamespace:
      name: kommander-system

  cost-analyzer:
    enabled: true
    fullnameOverride: "kommander-kubecost-cost-analyzer"
    global:
      prometheus:
        # If false, Prometheus will not be installed -- only actively supported on paid Kubecost plans
        enabled: true

      thanos:
        enabled: true
        queryService: http://kommander-kubecost-thanos-query-http.kommander:10902
        # The wait time before Kommander begins querying cost data for all attached clusters
        queryOffset: 5m

      grafana:
        # If false, Grafana will not be installed
        enabled: false
        # Use kommander monitoring Grafana instance
        domainName: kommander-kubeaddons-grafana.kommander.svc.cluster.local

    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
        ingress.kubernetes.io/auth-response-headers: X-Forwarded-User
        traefik.frontend.rule.type: "PathPrefix"
        traefik.frontend.redirect.regex: "^(.*)/ops/portal/kommander/kubecost/frontend$"
        traefik.frontend.redirect.replacement: "$1/ops/portal/kommander/kubecost/frontend/"
        traefik.ingress.kubernetes.io/request-modifier: 'ReplacePathRegex: ^/ops/portal/kommander/kubecost/frontend/(.*) /$1'
        traefik.ingress.kubernetes.io/auth-response-headers: X-Forwarded-User
        traefik.ingress.kubernetes.io/auth-type: forward
        traefik.ingress.kubernetes.io/auth-url: http://traefik-forward-auth-kubeaddons.kubeaddons.svc.cluster.local:4181/
        traefik.ingress.kubernetes.io/priority: "4"
      paths:
        - "/ops/portal/kommander/kubecost/frontend"
      hosts:
        - ""
      tls: []

    grafana:
      # These values are set so that kubecost grafana dashboards are installed.
      # Grafana itself is not installed.
      sidecar:
        dashboards:
          enabled: true
          label: grafana_dashboard_kommander
        datasources:
          enabled: true
          defaultDatasourceEnabled: false
          dataSourceName: KubecostPrometheus
          label: grafana_datasource_kommander

    prometheus:
      fullnameOverride: "kommander-kubecost-prometheus"
      server:
        fullnameOverride: "kommander-kubecost-prometheus-server"
      alertmanager:
        fullnameOverride: "kommander-kubecost-prometheus-alertmanager"
      kube-state-metrics:
        fullnameOverride: "kommander-kubecost-prometheus-kube-state-metrics"

    thanos:
      fullnameOverride: "kommander-kubecost-thanos"
      nameOverride: "kubecost-thanos"
      store:
        enabled: false
      query:
        enabled: true
        timeout: 3m
        maxConcurrent: 10
        # Name of HTTP request header used for dynamic prefixing of UI links and redirects.
        webPrefixHeader: "X-Forwarded-Prefix"
        http:
          service:
            labels:
              servicemonitor.kubeaddons.mesosphere.io/path: "metrics"
          ingress:
            enabled: true
            annotations:
              kubernetes.io/ingress.class: "traefik"
              traefik.frontend.rule.type: "PathPrefixStrip"
              traefik.ingress.kubernetes.io/auth-response-headers: "X-Forwarded-User"
              traefik.ingress.kubernetes.io/auth-type: "forward"
              traefik.ingress.kubernetes.io/auth-url: "http://traefik-forward-auth-kubeaddons.kubeaddons.svc.cluster.local:4181/"
              traefik.ingress.kubernetes.io/priority: "4"
            path: "/ops/portal/kommander/kubecost/query"
            hosts:
              - ""
            tls: []
        # Enable DNS discovery for stores
        storeDNSDiscovery: false
        # Enable DNS discovery for sidecars (this is for the chart built-in sidecar service)
        sidecarDNSDiscovery: false
        # Names of configmaps that contain addresses of store API servers, used for file service discovery.
        serviceDiscoveryFileConfigMaps:
        - kubecost-thanos-query-stores
        # Refresh interval to re-read file SD files. It is used as a resync fallback.
        serviceDiscoveryInterval: 5m
        extraArgs:
          - "--log.format=json"
          - "--grpc-client-tls-secure"
          - "--grpc-client-tls-cert=/etc/certs/tls.crt"
          - "--grpc-client-tls-key=/etc/certs/tls.key"
          - "--grpc-client-tls-ca=/etc/certs/ca.crt"
          - "--grpc-client-server-name=server.thanos.localhost.localdomain"
        certSecretName: kommander-kubecost-thanos-client-tls
      sidecar:
        enabled: false
      bucket:
        enabled: false
      compact:
        enabled: false

    kubecostProductConfigs:
      grafanaURL: "/ops/portal/kommander/monitoring/grafana"
      # used for display in Kubecost UI
      clusterName: "Kommander Host"
