{{- $serviceName := include "gatekeeper.fullname" . }}
{{- $ca := genCA ( printf "%s-ca" $serviceName ) 3650 }}
{{- $altName1 := printf "%s.%s" $serviceName .Release.Namespace }}
{{- $altName2 := printf "%s.%s.svc" $serviceName .Release.Namespace }}
{{- $cert := genSignedCert $serviceName nil (list $altName1 $altName2) 3650 $ca }}
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: {{ template "gatekeeper.fullname" . }}
  labels:
    {{- include "gatekeeper.commonLabels" . | nindent 4 }}
  annotations:
  {{- if .Values.webhook.certManager.enabled }}
    {{- if  (.Capabilities.APIVersions.Has "cert-manager.io/v1") }}
    cert-manager.io/inject-ca-from: {{ printf "%s/%s" .Release.Namespace (include "gatekeeper.rootCACertificate" .) | quote }}
    {{- else }}
    certmanager.k8s.io/inject-ca-from: {{ printf "%s/%s" .Release.Namespace (include "gatekeeper.rootCACertificate" .) | quote }}
    {{- end }}
  {{- end }}
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    {{ if not .Values.webhook.certManager.enabled }}
    caBundle: {{ b64enc $ca.Cert }}
    {{ end }}
    service:
      name: {{ template "gatekeeper.fullname" . }}
      namespace: {{ .Release.Namespace }}
      path: /v1/admit
      port: {{ .Values.service.port }}
  failurePolicy: {{ .Values.admissionControllerFailurePolicy }}
  matchPolicy: Exact
  name: validation.gatekeeper.sh
  {{- with .Values.admissionControllerNamespaceSelector }}
  namespaceSelector:
    {{ toYaml . | nindent 4 }}
  {{ end }}
  {{- if semverCompare ">=1.15.0-0" .Capabilities.KubeVersion.GitVersion }}
  objectSelector:
    matchExpressions:
    - {key: app.kubernetes.io/name, operator: NotIn, values: ["{{ include "gatekeeper.name" . }}"]}
    - {key: app.kubernetes.io/instance, operator: NotIn, values: ["{{ .Release.Name }}"]}
    {{- with .Values.admissionControllerObjectSelector.matchExpressions }}
    {{ toYaml . | nindent 4 }}
    {{ end }}
    {{- with .Values.admissionControllerObjectSelector.matchLabels }}
    matchLabels:
    {{ toYaml . | nindent 4 }}
    {{ end }}
  {{- end }}
  rules:
  {{ toYaml .Values.webhook.rules | nindent 2 }}
  sideEffects: {{ .Values.webhook.sideEffects }}
---
{{ if .Values.webhook.certManager.enabled }}
---
# Create a selfsigned Issuer, in order to create a root CA certificate for
# signing webhook serving certificates
{{- if  (.Capabilities.APIVersions.Has "cert-manager.io/v1") }}
apiVersion: cert-manager.io/v1
{{- else }}
apiVersion: certmanager.k8s.io/v1alpha1
{{- end }}
kind: Issuer
metadata:
  name: {{ include "gatekeeper.selfSignedIssuer" . }}
  labels:
    {{- include "gatekeeper.commonLabels" . | nindent 4 }}
spec:
  selfSigned: {}
---
# Generate a CA Certificate used to sign certificates for the webhook
{{- if  (.Capabilities.APIVersions.Has "cert-manager.io/v1") }}
apiVersion: cert-manager.io/v1
{{- else }}
apiVersion: certmanager.k8s.io/v1alpha1
{{- end }}
kind: Certificate
metadata:
  name: {{ include "gatekeeper.rootCACertificate" . }}
  labels:
    {{- include "gatekeeper.commonLabels" . | nindent 4 }}
spec:
  secretName: {{ include "gatekeeper.rootCACertificate" . }}
  duration: 43800h # 5y
  issuerRef:
    name: {{ include "gatekeeper.selfSignedIssuer" . }}
  commonName: "ca.webhook.gatekeeper"
  isCA: true
---
# Create an Issuer that uses the above generated CA certificate to issue certs
{{- if  (.Capabilities.APIVersions.Has "cert-manager.io/v1") }}
apiVersion: cert-manager.io/v1
{{- else }}
apiVersion: certmanager.k8s.io/v1alpha1
{{- end }}
kind: Issuer
metadata:
  name: {{ include "gatekeeper.rootCAIssuer" . }}
  labels:
    {{- include "gatekeeper.commonLabels" . | nindent 4 }}
spec:
  ca:
    secretName: {{ include "gatekeeper.rootCACertificate" . }}
---
# Finally, generate a serving certificate for the webhook to use
{{- if  (.Capabilities.APIVersions.Has "cert-manager.io/v1") }}
apiVersion: cert-manager.io/v1
{{- else }}
apiVersion: certmanager.k8s.io/v1alpha1
{{- end }}
kind: Certificate
metadata:
  name: {{ include "gatekeeper.servingCertificate" . }}
  labels:
    {{- include "gatekeeper.commonLabels" . | nindent 4 }}
spec:
  secretName: {{ template "gatekeeper.fullname" . }}-cert
  duration: 8760h # 1y
  issuerRef:
    name: {{ include "gatekeeper.rootCAIssuer" . }}
  dnsNames:
  - {{ include "gatekeeper.fullname" . }}
  - {{ include "gatekeeper.fullname" . }}.{{ .Release.Namespace }}
  - {{ include "gatekeeper.fullname" . }}.{{ .Release.Namespace }}.svc
{{ else }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "gatekeeper.fullname" . }}-cert
  labels:
    {{- include "gatekeeper.commonLabels" . | nindent 4 }}
type: kubernetes.io/tls
data:
  tls.crt: {{ b64enc $cert.Cert }}
  tls.key: {{ b64enc $cert.Key }}
  ca.crt: {{ b64enc $ca.Cert }}
{{ end }}
