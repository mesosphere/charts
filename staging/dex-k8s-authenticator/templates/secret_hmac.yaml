{{- if .Values.dexK8sAuthenticator.generateHmacSecret -}}
{{- $secret_name := printf "%s-hmac-secret" (include "dex-k8s-authenticator.fullname" .) -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secret_name }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secret := (lookup "v1" "Secret" .Release.Namespace $secret_name).data | default dict }}
  # set $hmacSecret to existing secret data or generate a random one when not exists
  {{- $hmacSecret := (get $secret "hmac-secret") | default (randAlphaNum 32 | b64enc) }}
  # generate 32 chars long random string, base64 encode it and then double-quote the result string.
  hmac-secret: {{ $hmacSecret | b64enc | quote }}
{{- end -}}
