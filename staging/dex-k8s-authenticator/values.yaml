# Default values for dex-k8s-authenticator.

# Deploy environment label, e.g. dev, test, prod
global:
  deployEnv: dev

replicaCount: 1

image:
  repository: mesosphere/dex-k8s-authenticator
  tag: v1.1.1-62a0a92-mesosphere
  pullPolicy: Always

dexK8sAuthenticator:
  port: 5555
  debug: false
  livenessProbe:
    failureThreshold: 3   # Under high load use 'failureThreshold: 6'
    periodSeconds: 10   # Under high load use 'periodSeconds: 30'
    initialDelaySeconds: 10   # Under high load use 'initialDelaySeconds: 15'
    timeoutSeconds: 10   # Under high load use 'timeoutSeconds: 30'
  readinessProbe:
    failureThreshold: 3
    periodSeconds: 10   # Under high load use 'periodSeconds: 30'
    initialDelaySeconds: 10   # Under high load use 'initialDelaySeconds: 15'
    timeoutSeconds: 10   # Under high load use 'timeoutSeconds: 30'
  web_path_prefix: /
  # logoUrl: http://<path-to-your-logo.png>
  # tlsCert: /path/to/dex-client.crt
  # tlsKey: /path/to/dex-client.key
  clusters:
  - name: my-cluster
    short_description: "My Cluster"
    description: "Example Cluster Long Description..."
    client_secret: pUBnBOY80SnXgjibTYM9ZWNzY2xreNGQok
    issuer: https://dex.example.com
    k8s_master_uri: https://my-cluster.example.com
    client_id: my-cluster
    redirect_uri: https://login.example.com/callback/my-cluster
    k8s_ca_uri: https://url-to-your-ca.crt

service:
  annotations: {}
  type: ClusterIP
  port: 5555

  # For nodeport, specify the following:
  #   type: NodePort
  #   nodePort: <port-number>

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

env: {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

# By default, Kubernetes CA will be used. If `caCerts.enabled` is set to
# `true`, one can choose one of the following:
# 1. Using system defaults by setting `caCerts.useSystemDefault` to `true`
# 2. Using custom CA from a secret
# If both are set, using system default would take precedence.
caCerts:
  enabled: false
  useSystemDefault: false
  # specify either caSecretName or secrets
  caSecretName:
  secrets: {}
  # Array of Self Signed Certificates
  # cat CA.crt | base64 -w 0
  #
  #     name: The internal k8s name of the secret we create. It's also used in
  #     the volumeMount name. It must respect the k8s naming convension (avoid
  #     upper-case and '.' to be safe).
  #
  #     filename: The filename of the CA to be mounted. It must end in .crt for
  #     update-ca-certificates to work
  #
  #     value: The base64 encoded value of the CA
  #
  # secrets:
  # - name: ca-cert1
  #   filename: ca1.crt
  #   value: LS0tLS1......X2F
  # - name: ca-cert2
  #   filename: ca2.crt
  #   value: DS1tFA1......X2F

nodeSelector: {}

tolerations: []

affinity: {}

deploymentAnnotations: {}

# Init containers to add to the Dex K8s Authenticator deployment's pod spec. Optional.
initContainers: []
# - name:
#   image:
#   volumeMounts:
#     - name: plugins
#       mountPath: /target
