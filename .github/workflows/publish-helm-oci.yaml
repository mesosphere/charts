name: Publish Helm Charts to GHCR (OCI)

on:
  workflow_dispatch:
  push:
    branches:
      - sandy/oci-helm-migration # branch updated for testing

jobs:
  push-charts:
    runs-on:
    - self-hosted
    - medium
    permissions:
      contents: read
      id-token: write
    env:
      GH_TOKEN: ${{ secrets.MESOSPHERECI_USER_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - uses: chrisdickinson/setup-yq@latest
        with:
          yq-version: v4.25.3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and push Helm charts
        run: |
          mkdir -p charts

          count=$(yq e 'length' hack/charts-sources.yaml)
          for i in $(seq 0 $((count - 1))); do
            name=$(yq e ".[$i].chart" hack/charts-sources.yaml)
            repo=$(yq e ".[$i].helm_repo" hack/charts-sources.yaml)

            echo "Processing chart: $name from $repo"

            helm repo add "$name" "$repo" || true
          done

          helm repo update

          for i in $(seq 0 $((count - 1))); do
            name=$(yq e ".[$i].chart" hack/charts-sources.yaml)
            repo=$(yq e ".[$i].helm_repo" hack/charts-sources.yaml)

            version=$(helm search repo "$name/$name" -o yaml | yq e '.[0].version' -)
            echo "Found version $version for $name"

            CHART_REF="ghcr.io/mesosphere/charts/$name"

            echo "Checking if $name version $version exists in GHCR"
            if helm show all "oci://$CHART_REF" --version "$version" > /dev/null 2>&1; then
              echo "Chart $name version $version already exists in GHCR. Skipping push."
              continue
            fi
            
            if ! helm pull "$name/$name" --version "$version" --untar --destination charts; then
              echo "Skipping $name: failed to pull version $version from $repo"
              continue
            fi
            #helm pull "$name/$name" --version "$version" --untar --destination charts
            helm package "charts/$name"

            echo "Pushing $name-$version to GHCR"
            echo "helm push \"$name-$version.tgz\" oci://ghcr.io/mesosphere/charts"
            helm push "$name-$version.tgz" oci://ghcr.io/mesosphere/charts || {
              echo "Failed to push $name-$version to GHCR"
              continue
            }
          done
